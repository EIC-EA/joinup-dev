<?xml version="1.0" encoding="UTF-8" ?>

<project name="ContinuousPHP" default="help">

<!--    <echo msg="Loading AWS additional tasks." />-->
<!--    <import file="./vendor/continuousphp/aws-sdk-phing/tasks.xml" />-->
<!--    <property name="aws.profile" value="" />-->

    <echo msg="Turn environment variable into a phing property" />
    <taskdef name="env2property" classname="\DrupalProject\Phing\EnvironmentVarAsProperty" />

<!--    <echo msg="Loading infra additional tasks." />-->
<!--    <import file="./vendor/ec-europa/infra/infra.xml" />-->

    <!-- Run Behat tests. -->
<!--    &lt;!&ndash; Use this target to run tests with increased verbosity on ContinuousPHP to help debugging. &ndash;&gt;-->
<!--    <target name="run-behat-tests" description="Run Behat tests.">-->
<!--        <behat-->
<!--            executable="${behat.bin}"-->
<!--            config="${behat.yml.path}"-->
<!--            strict="${behat.options.strict}"-->
<!--            verbose="${behat.options.verbosity}"-->
<!--        />-->
<!--    </target>-->

    <target name="setup-continuousphp"
            depends="check-continuousphp">
        <echo msg="Set the virtuoso checkpoint to -1. Do not use a checkpoint for CPHP testing."/>
        <phingcall target="set-virtuoso-checkpoint">
            <property name="interval" value="-1"/>
        </phingcall>
        <echo message="Put the odbc configuration file in the home folder where CPHP can find it" />
        <copy
            file="./vendor/ec-europa/infra/continuousphp/odbc.ini"
            tofile="${user.home}/.odbc.ini"
            overwrite="true" />
<!--        <echo message="Create Solr index" />-->
<!--        <exec dir="${project.basedir}"-->
<!--              command="sudo curl -o /opt/solr/search_api_solr.tar.gz https://ftp.drupal.org/files/projects/search_api_solr-8.x-1.0-alpha4.tar.gz;-->
<!--sudo tar xvzf /opt/solr/search_api_solr.tar.gz -C /opt/solr;-->
<!--sudo /opt/solr/bin/solr create_core -c drupal_published;-->
<!--sudo mkdir /opt/solr/server/solr/drupal_published;-->
<!--sudo rsync -avz /opt/solr/search_api_solr/solr-conf/6.x/ /opt/solr/server/solr/drupal_published/conf/;-->
<!--sudo /opt/solr/bin/solr create_core -c drupal_unpublished;-->
<!--sudo mkdir /opt/solr/server/solr/drupal_unpublished;-->
<!--sudo rsync -avz /opt/solr/search_api_solr/solr-conf/6.x/ /opt/solr/server/solr/drupal_unpublished/conf/"-->
<!--              checkreturn="true"-->
<!--              passthru="true" />-->
<!--        <echo message="Report Solr status" />-->
<!--        <exec dir="${project.basedir}"-->
<!--              command="sudo /opt/solr/bin/solr status"-->
<!--              checkreturn="true"-->
<!--              passthru="true" />-->
<!--        <echo message="Restart Solr" />-->
<!--        <exec dir="${project.basedir}"-->
<!--              command="sudo /opt/solr/bin/solr restart"-->
<!--              checkreturn="true"-->
<!--              passthru="true"-->
<!--              spawn="true" />-->
    </target>

    <target name="check-continuousphp">
        <echo message="Check if we are running on ContinuousPHP" />
        <if>
            <not>
                <available file="/home/cphp" type="dir" property="environment.cphp" />
            </not>
            <then>
                <fail message="Only run this target on a ContinuousPHP test environment" />
            </then>
        </if>
    </target>

    <target name="build-continuousphp" depends="install-java, setup-apache-solr">
        <!-- Set environment variables as extra properties through cloudformation -->
        <env2property prefix="cphp" phingproperty="cloudformation.properties" />
        <echo message="Copy CPHP pipeline variables to local properties file" />
        <echoproperties prefix="cphp." destfile="build.properties.local" />
        <exec dir="${project.basedir}"
              command="sed -i 's/^cphp\.//' build.properties.local"
              checkreturn="true"
              passthru="true" />
        <echo message="Create the Behat configuration files to run in parallel." />
        <phingcall target="setup-behat">
            <property name="behat.yml.path" value="${behat.dir}/behat-only-selenium-cphp.yml" />
            <property name="behat.yml.template" value="${behat.dir}/behat-only-selenium-cphp.yml.dist" />
        </phingcall>
        <phingcall target="setup-behat">
            <property name="behat.yml.path" value="${behat.dir}/behat-group-a-cphp.yml" />
            <property name="behat.yml.template" value="${behat.dir}/behat-group-a-cphp.yml.dist" />
        </phingcall>
        <phingcall target="setup-behat">
            <property name="behat.yml.path" value="${behat.dir}/behat-group-b-cphp.yml" />
            <property name="behat.yml.template" value="${behat.dir}/behat-group-b-cphp.yml.dist" />
        </phingcall>
        <phingcall target="setup-behat">
            <property name="behat.yml.path" value="${behat.dir}/behat-remainder-cphp.yml" />
            <property name="behat.yml.template" value="${behat.dir}/behat-remainder-cphp.yml.dist" />
        </phingcall>


    </target>


    <target name="install-java">
        <echo message="lsb_release -a"/>
        <exec command="lsb_release -a" checkreturn="true" passthru="true"/>

        <mkdir dir="${tmp.dir}" />
        <mkdir dir="/java" />
        <httpget url="https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u242-b08/OpenJDK8U-jre_x64_linux_hotspot_8u242b08.tar.gz" dir="${tmp.dir}" />
        <untar file="OpenJDK8U-jre_x64_linux_hotspot_8u242b08.tar.gz" todir="/java"/>
        <exec command="export PATH=/java/jdk8u242-b08-jre/bin:$PATH"/>


<!--        <echo message="sudo apt-get &#45;&#45;yes update"/>-->
<!--        <exec command="sudo apt-get &#45;&#45;yes update" checkreturn="true" passthru="true"/>-->

<!--        <echo message="sudo apt-get &#45;&#45;yes install software-properties-common"/>-->
<!--        <exec command="sudo apt-get &#45;&#45;yes install software-properties-common" checkreturn="true" passthru="true"/>-->

<!--        <echo message="sudo apt-get &#45;&#45;yes install -t jessie-backports  openjdk-8-jre-headless ca-certificates-java"/>-->
<!--        <exec command="sudo apt-get &#45;&#45;yes install -t jessie-backports  openjdk-8-jre-headless ca-certificates-java" checkreturn="true" passthru="true"/>-->

<!--        <echo message="wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | sudo apt-key add - ;-->
<!--sudo add-apt-repository &#45;&#45;yes https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/ ;-->
<!--sudo apt-get &#45;&#45;yes update"/>-->
<!--        <exec command="wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | sudo apt-key add -" checkreturn="true" passthru="true"/>-->

<!--        <echo message="sudo -E add-apt-repository &#45;&#45;yes ppa:linuxuprising/java"/>-->
<!--        <exec command="sudo -E add-apt-repository &#45;&#45;yes ppa:linuxuprising/java" checkreturn="true" passthru="true"/>-->

<!--        <echo message="sudo apt-get &#45;&#45;yes update"/>-->
<!--        <exec command="sudo apt-get &#45;&#45;yes update" checkreturn="true" passthru="true"/>-->

<!--        <echo message="sudo apt-get &#45;&#45;yes install openjdk-8-jre-headless"/>-->
<!--        <exec command="sudo apt-get &#45;&#45;yes install openjdk-8-jre-headless" checkreturn="true" passthru="true"/>-->

<!--        <echo message="export"/>-->
<!--        <exec command="export" checkreturn="true" passthru="true"/>-->

        <echo message="java -version"/>
        <exec command="java -version" checkreturn="true" passthru="true"/>
   </target>
     <!--    &lt;!&ndash; provision new demo/test stack on AWS &ndash;&gt;-->
<!--    <target name="provision-stack"-->
<!--            description="Provision a stack on AWS"-->
<!--            depends="setup-aws, run-stack, setup-deployment-group" />-->

    <!-- Sleeps to allow services to get up and be ready -->
    <target name="sleep">
        <echo message="Sleeping ${sleep.hours} hours, ${sleep.minutes} minutes, ${sleep.seconds} seconds, ${sleep.milliseconds} milliseconds"/>
        <sleep hours="${sleep.hours}"
               minutes="${sleep.minutes}"
               seconds="${sleep.seconds}"
               milliseconds="${sleep.milliseconds}"/>
    </target>

</project>
