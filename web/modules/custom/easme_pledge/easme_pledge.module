<?php

/**
 * @file
 * Contains hooks and functions for the easme_pledge module.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\easme_pledge\EventSubscriber\NotificationSubscriber;
use Drupal\node\NodeInterface;
use Drupal\rdf_entity\Entity\RdfEntityType;
use Drupal\rdf_entity\RdfInterface;

/**
 * Implements hook_entity_extra_field_info().
 */
function easme_pledge_entity_extra_field_info() {
  $fields = [];

  $solution = RdfEntityType::load('solution');
  if ($solution) {
    $display = &$fields['rdf_entity'][$solution->id()]['display'];
    $display['pledge'] = [
      'label' => t('Pledge'),
      'description' => t('A link to the pledge creation page.'),
      'visible' => FALSE,
    ];
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function easme_pledge_rdf_entity_view(array &$build, RdfInterface $entity, EntityViewDisplayInterface $display, string $view_mode): void {
  if ($entity->bundle() != 'solution') {
    return;
  }

  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  if ($display->getComponent('pledge')) {
    $build['pledge'] = [
      '#type' => 'link',
      '#title' => t('Pledge'),
      '#url' => Url::fromRoute('easme_pledge.rdf_entity_pledge.add', [
        'rdf_entity' => $entity->id(),
        'node_type' => 'pledge',
      ]),
    ];
  }
}

/**
 * Implements hook_node_access().
 */
function easme_pledge_node_access(NodeInterface $entity, string $operation, AccountInterface $account): AccessResult {
  if ($entity->bundle() !== 'pledge') {
    return AccessResult::neutral();
  }
  // Even though the community content workflow access handler is designed for
  // community content, for this case, it serves our purpose.
  return \Drupal::service('easme_pledge.access_handler')->entityAccess($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Sends notifications when a pledge is updated.
 */
function easme_pledge_node_insert(EntityInterface $entity) {
  if ($entity->bundle() !== 'pledge') {
    return;
  }
  joinup_notification_dispatch_notification('create', NotificationSubscriber::PLEDGE_CREATE, $entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * It is really hard to keep track of the from_state since state_machine does
 * not give us access to the initialValue protected property of the StateItem
 * class.
 *
 * Load the unchanged latest version and get the source state and save it to the
 * entity.
 *
 * This workaround comes because the $entity->original property points to the
 * latest published version instead of the latest revision.
 *
 * @see: https://www.drupal.org/node/2833084
 */
function easme_pledge_node_presave(EntityInterface $entity) {
  if ($entity->bundle() !== 'pledge') {
    return;
  }
  $entity->field_state_initial_value = $entity->get('field_state')->first()->getOriginalId();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Sends notifications when community content is updated.
 */
function easme_pledge_node_update(EntityInterface $entity) {
  if ($entity->bundle() !== 'pledge') {
    return;
  }
  joinup_notification_dispatch_notification('update', NotificationSubscriber::PLEDGE_UPDATE, $entity);
}
