<?php

/**
 * @file
 * Basic file for the Joinup Debug module.
 */

declare(strict_types = 1);

use Drupal\node\NodeInterface;
use Drupal\Core\Utility\Error;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function joinup_debug_node_presave(NodeInterface $node) {
  // At this point, if the entity is not new, the original is already loaded and
  // stored in the ::original property of the entity.
  // @see: \Drupal\Core\Entity\EntityStorageBase::doPreSave.
  $last_revision_id = _joinup_debug_get_last_published_node_revision_id($node);
  // The node prior to saving should be the latest revision id.
  if (!empty($last_revision_id) && $node->getRevisionId() !== NULL && $node->getRevisionId() < $last_revision_id) {
    _joinup_debug_log_wrong_revision_error($node);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function joinup_debug_node_update(NodeInterface $node) {
  $last_revision_id = _joinup_debug_get_last_published_node_revision_id($node);
  if (!empty($last_revision_id) && $node->getRevisionId() < $last_revision_id) {
    _joinup_debug_log_wrong_revision_error($node);
  }
}

/**
 * Return the latest published revision id for a given node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The published node.
 *
 * @return string|null
 *   The revision id.
 */
function _joinup_debug_get_last_published_node_revision_id(NodeInterface $node): ?string {
  $vids = \Drupal::database()->query('SELECT vid FROM {node_field_revision} WHERE nid=:nid AND status=1 ORDER BY vid', [
    ':nid' => $node->id(),
  ])->fetchCol();

  return empty($vids) ? NULL : end($vids);
}

/**
 * Logs the wrong revision error to the logger as a critical issue.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The related node.
 */
function _joinup_debug_log_wrong_revision_error(NodeInterface $node): void {
  $backtrace = debug_backtrace();
  $backtrace = Error::formatBacktrace($backtrace);
  $message = 'Wrong revision issue: @entity_type (@bundle) with id @id, vid @vid. Stack trace:\n@trace';
  \Drupal::logger('joinup_debug')->critical($message, [
    '@entity_type' => $node->getEntityTypeId(),
    '@bundle' => $node->bundle(),
    '@id' => $node->id(),
    '@vid' => $node->getRevisionId(),
    '@trace' => $backtrace,
  ]);
}
