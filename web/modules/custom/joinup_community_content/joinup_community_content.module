<?php

/**
 * @file
 * Main functions and hook implementations of the community content module.
 */

declare(strict_types = 1);

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\joinup_community_content\CommunityContentHelper;
use Drupal\joinup_core\NodeWorkflowAccessControlHandler;

/**
 * Implements hook_entity_extra_field_info().
 */
function joinup_community_content_entity_extra_field_info() {
  $fields = [];

  foreach (CommunityContentHelper::getBundles() as $bundle) {
    $fields['node'][$bundle]['display']['share_link'] = [
      'label' => t('Share'),
      'description' => t('A link to share the content'),
      'visible' => FALSE,
    ];
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function joinup_community_content_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (!$display->getComponent('share_link')) {
    return;
  }

  $url = Url::fromRoute('joinup_community_content.share_content_form', [
    'node' => $entity->id(),
  ]);
  $build['share_link'] = [
    '#theme' => 'link_icon',
    '#title' => t('Share'),
    '#icon' => 'share',
    '#url' => $url,
    '#attributes' => [
      'class' => ['use-ajax', 'action-link'],
      'data-dialog-type' => 'modal',
      'data-dialog-options' => Json::encode([
        'width' => 'auto',
        'height' => 'auto',
      ]),
    ],
    '#access' => $url->access(),
    '#attached' => ['library' => ['core/drupal.dialog.ajax']],
  ];
  $build['#cache'] = [
    'contexts' => [
      'og_role',
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function joinup_community_content_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Skip if we are not on a community content form.
  $community_content_form_ids = [];
  foreach (CommunityContentHelper::getBundles() as $bundle) {
    $community_content_form_ids[] = "node_{$bundle}_form";
    $community_content_form_ids[] = "node_{$bundle}_edit_form";
  }
  if (!in_array($form_id, $community_content_form_ids)) {
    return;
  }

  // Attach a form process handler that will change the label of the description
  // field for uploaded files on the community content forms. This would
  // otherwise conflict with the already existing "Description" field on Events.
  // The field label is changed on all community content types for consistency.
  if (!empty($form['field_attachment']['widget'])) {
    foreach (Element::children($form['field_attachment']['widget']) as $key) {
      $form['field_attachment']['widget'][$key]['#process'][] = 'joinup_community_content_attachment_file_process';
    }
  }
}

/**
 * Form #process handler for the file fields of community content forms.
 *
 * @see \joinup_community_content_form_node_form_alter()
 */
function joinup_community_content_attachment_file_process($element, FormStateInterface $form_state, $form) {
  if (!empty($element['description']['#title'])) {
    $element['description']['#title'] = t('File description');
  }
  return $element;
}

/**
 * Returns the appropriate workflow to use for the community content.
 *
 * The callback ensures that even if the parent is updated and the moderation
 * status changes, it will still use the proper workflow.
 * The fact that both pre and post moderated workflow use the same states
 * ensures that there are not going to be any issues as we only change
 * transitions.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The community content entity.
 *
 * @return string
 *   The id of the workflow to use.
 *
 * @throws Exception
 *    Thrown when the function is called for bundles that do not refer to
 *    community content.
 */
function joinup_community_content_workflow_selector(EntityInterface $entity) {
  $bundles = ['document', 'event', 'news'];
  if ($entity->getEntityTypeId() !== 'node' || !in_array($entity->bundle(), $bundles)) {
    throw new Exception('This function can only be called for community content apart from discussion.');
  }

  /** @var \Drupal\joinup_core\JoinupRelationManagerInterface $relation_manager */
  $relation_manager = \Drupal::service('joinup_core.relations_manager');
  $moderation = $relation_manager->getParentModeration($entity);
  return $moderation == NodeWorkflowAccessControlHandler::PRE_MODERATION ? 'node:pre_moderated' : 'node:post_moderated';
}

/**
 * Implements hook_preprocess_node().
 *
 * For shared nodes, adds an attribute with the id of the parent entity where
 * they have been shared from.
 */
function joinup_community_content_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];

  // Apply the visual cue only on the tile view mode.
  if ($variables['view_mode'] !== 'view_mode_tile') {
    return;
  }

  // If the node is shared somewhere, attach the related library.
  if ($node->hasField('field_shared_in') && !$node->get('field_shared_in')->isEmpty()) {
    $variables['#attached']['library'][] = 'joinup_community_content/shared_content';
  }
}

/**
 * Implements hook_theme().
 */
function joinup_community_content_theme($existing, $type, $theme, $path) {
  return [
    'link_icon' => [
      'variables' => [
        'attributes' => [],
        'icon' => NULL,
        'title' => NULL,
        'url' => NULL,
      ],
    ],
    'social_share' => [
      'variables' => ['entity' => NULL],
    ],
  ];
}

/**
 * Preprocess function for the "social_share" theme hook.
 *
 * @param array $variables
 *   An associative array containing:
 *   - entity: the entity being shared.
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 *   Thrown when the entity being shared does not support generating a URL.
 */
function template_preprocess_social_share(array &$variables) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $variables['entity'];
  // Generate an absolute, un-aliased URL.
  $variables['url'] = $entity->toUrl('canonical', [
    'language' => $entity->language(),
  ])->setAbsolute()->setOption('alias', TRUE);

  $variables['encoded_url'] = urlencode($variables['url']->toString());
  $variables['encoded_title'] = urlencode($entity->label());
}
