<?php

/**
 * @file
 * Hook implementations for the Joinup Event module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\joinup_event\Plugin\Field\FieldFormatter\WebtoolsMapFormatter;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function joinup_event_entity_bundle_field_info_alter(array &$fields, EntityTypeInterface $entity_type, string $bundle): void {
  if ($entity_type->id() == 'node' && $bundle == 'event') {
    if (!empty($fields['field_short_title'])) {
      $fields['field_short_title']->addConstraint('UniqueField');
    }
    if (!empty($fields['title'])) {
      $fields['title']->addConstraint('UniqueFieldInBundle', ['bundles' => ['event']]);
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function joinup_event_entity_type_alter(array &$entity_types): void {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface */
  if (isset($entity_types['node'])) {
    $entity_types['node']->addConstraint('EventLocationConstraint');
  }
}

/**
 * Implements template_preprocess_fieldset().
 */
function joinup_event_preprocess_fieldset(array &$variables): void {
  // Add an "asterisk" to the Event Location Field Group.
  if ($variables['element']['#id'] == 'group-event-location') {
    $variables['legend_span']['attributes']->addClass('js-form-required form-required');
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function joinup_event_field_formatter_info_alter(array &$info) {
  if (isset($info['oe_webtools_maps_map'])) {
    $info['oe_webtools_maps_map']['class'] = WebtoolsMapFormatter::class;
  }
}

/**
 * Implements hook_token_info_alter().
 */
function joinup_event_token_info_alter(&$info) {
  $info['tokens']['node']['event_url'] = [
    'name' => t('Url of the event'),
    'description' => t('The website provided if available or the Joinup event URL.'),
  ];
}

/**
 * Implements hook_tokens().
 */
function joinup_event_tokens($type, array $tokens, array $data = [], array $options = [], ?BubbleableMetadata $bubbleable_metadata = NULL) {
  $replacements = [];

  if ($type == 'node' && !empty($data['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Returns the event url. If the user has inserted a value in the
        // field_event_web_url, then this is the event url, otherwise, uses the
        // joinup url.
        case 'event_url':
          if ($node->isNew() || $node->bundle() !== 'event') {
            break;
          }

          $replacements[$original] = $node->get('field_event_web_url')->isEmpty() ?
            $node->toUrl('canonical', ['absolute' => TRUE])->toString() :
            $node->get('field_event_web_url')->uri;
      }
    }
  }

  return $replacements;
}
