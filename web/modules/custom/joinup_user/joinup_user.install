<?php

/**
 * @file
 * Install functions of the Joinup user module.
 */

declare(strict_types = 1);

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\File\FileSystemInterface;
use Drupal\file\Entity\File;
use Drupal\joinup_user\Entity\JoinupUser;
use Drupal\joinup_user\JoinupUserViewsData;

/**
 * Implements hook_install().
 */
function joinup_user_install() {
  joinup_user_setup_default_avatar();

  // Update some classes for the 'user' entity type.
  $manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $manager->getEntityType('user');
  $entity_type
    ->setClass(JoinupUser::class)
    ->setHandlerClass('views_data', JoinupUserViewsData::class);
  $manager->updateEntityType($entity_type);

  // Uninstall and recreate the field definition.
  $definition = $manager->getFieldStorageDefinition('status', 'user');
  $manager->uninstallFieldStorageDefinition($definition);
  $definition = BaseFieldDefinition::create('integer')
    ->setLabel(t('User status'))
    ->setDescription(t('Whether the user is active, blocked or cancelled.'))
    ->setSetting('size', 'tiny')
    ->setDefaultValue(0);
  $manager->installFieldStorageDefinition('status', 'user', 'user', $definition);
  // The anonymous account was created before.
  \Drupal::database()->update('users_field_data')
    ->fields(['status' => 0])
    ->condition('uid', 0)
    ->execute();
}

/**
 * Set a default image for the users avatar.
 */
function joinup_user_setup_default_avatar() {
  $directory = \Drupal::service('file_system')
    ->realpath(drupal_get_path('module', 'joinup_user') . '/includes');
  $file_name = 'user_icon.png';
  $file_path = $directory . '/' . $file_name;
  $internal_path = "public://default_images";
  if (is_file($file_path) && \Drupal::service('file_system')->prepareDirectory($internal_path, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
    $file_system = \Drupal::service('file_system');
    $destination = file_build_uri($file_system->basename($file_path));
    $file_path = $file_system->copy($file_path, $destination, FileSystemInterface::EXISTS_REPLACE);
  }
  /** @var \Drupal\file\FileInterface $file */
  $file = File::create(['uri' => $file_path]);

  // The uuid is the one assigned to the user photo field so there is no need
  // to manually edit and assign the file.
  $file->set('uuid', '2e24bbc5-dedf-42b0-85cf-35940274c2f8');
  $file->setPermanent();
  $file->save();
}

/**
 * Extend the account status field functionality.
 */
function joinup_user_update_0106100(): void {
  $db = \Drupal::database();
  $manager = \Drupal::entityDefinitionUpdateManager();

  // Store the current 'status' values. We need to recreate the field.
  $active_uids = $db->select('users_field_data')
    ->fields('users_field_data', ['uid'])
    ->condition('status', 1)
    ->execute()
    ->fetchCol();
  $cancelled_uids = $db->select('users_field_data')
    ->fields('users_field_data', ['uid'])
    ->condition('status', 2)
    ->execute()
    ->fetchCol();

  // Uninstall and recreate the field definition.
  $definition = $manager->getFieldStorageDefinition('status', 'user');
  $manager->uninstallFieldStorageDefinition($definition);
  $definition = BaseFieldDefinition::create('integer')
    ->setLabel(t('User status'))
    ->setDescription(t('Whether the user is active, blocked or cancelled.'))
    ->setSetting('size', 'tiny')
    ->setDefaultValue(0);
  $manager->installFieldStorageDefinition('status', 'user', 'user', $definition);

  // Restore the 'status' field.
  if ($active_uids) {
    $db->update('users_field_data')
      ->fields(['status' => 1])
      ->condition('uid', $active_uids, 'IN')
      ->execute();
  }
  if ($cancelled_uids) {
    $db->update('users_field_data')
      ->fields(['status' => 2])
      ->condition('uid', $cancelled_uids, 'IN')
      ->execute();
  }
  $db->update('users_field_data')
    ->fields(['status' => 0])
    ->isNull('status')
    ->execute();
}

/**
 * Fix the user 'status' field storage definition once for ever.
 */
function joinup_user_update_0106101(): void {
  $definition = BaseFieldDefinition::create('integer')
    ->setLabel(t('User status'))
    ->setDescription(t('Whether the user is active, blocked or cancelled.'))
    ->setSetting('size', 'tiny')
    ->setDefaultValue(0);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('status', 'user', 'user', $definition);
}
